schedules:
- cron: 0 9 * * 1
  displayName: "Run CodeQL3000 weekly, Monday at 2:00 AM PDT"
  branches:
    include:
    - main
  always: true

parameters:
# Parameter below is ignored in public builds.
#
# Choose whether to run the CodeQL3000 tasks.
# Manual builds align w/ official builds unless this parameter is true.
- name: runCodeQL3000
  default: false
  displayName: Run CodeQL3000 tasks
  type: boolean

trigger:
  branches:
    include:
    - main

# Run PR validation on all branches
pr:
  branches:
    include:
    - '*'

variables:
- ${{ if eq(variables['System.TeamProject'], 'public') }}:
  - name: BuildScriptArgs
    value: ''
- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - name: BuildScriptArgs
    value: '/p:BuildNumber=$(Build.BuildId)'
- name: runCodeQL3000
  value: ${{ and(ne(variables['System.TeamProject'], 'public'), or(eq(variables['Build.Reason'], 'Schedule'), and(eq(variables['Build.Reason'], 'Manual'), eq(parameters.runCodeQL3000, 'true')))) }}

jobs:
- job: Webhooks_Build
  displayName: Build AspnetWebHooks
  timeoutInMinutes: 60
  workspace:
    clean: all
  pool:
    ${{ if eq(variables['System.TeamProject'], 'public') }}:
      name: NetCore-Public
      demands: ImageOverride -equals build.windows.10.amd64.vs2017.open
    ${{ if ne(variables['System.TeamProject'], 'public') }}:
      name: NetCore1ESPool-Internal
      demands: ImageOverride -equals build.windows.10.amd64.vs2017
  variables:
  - ${{ if eq(variables.runCodeQL3000, 'true') }}:
    - name: _AdditionalBuildArgs
      value: /p:Test=false /p:Sign=false /p:Pack=false /p:Publish=false /p:UseSharedCompilation=false
    # Security analysis is included in normal runs. Disable its auto-injection.
    - name: skipNugetSecurityAnalysis
      value: true
    - name: Codeql.SourceRoot
      value: src
    # Do not let CodeQL3000 Extension gate scan frequency.
    - name: Codeql.Cadence
      value: 0
    # Enable CodeQL3000 unconditionally so it may be run on any branch.
    - name: Codeql.Enabled
      value: true
    # CodeQL3000 needs this plumbed along as a variable to enable TSA.
    - name: Codeql.TSAEnabled
      value: ${{ eq(variables['Build.Reason'], 'Schedule') }}
    # Default expects tsaoptions.json under SourceRoot.
    - name: Codeql.TSAOptionsPath
      value: '$(Build.SourcesDirectory)/.config/tsaoptions.json'
  - ${{ if ne(variables.runCodeQL3000, 'true') }}:
    - name: _AdditionalBuildArgs
      value:
  steps:
  - checkout: self
    clean: true
  - task: NuGetToolInstaller@1
    displayName: 'Install NuGet.exe'
  - task: NuGetCommand@2
    displayName: 'Clear NuGet caches'
    inputs:
      command: custom
      arguments: 'locals all -clear'
  - ${{ if eq(variables.runCodeQL3000, 'true') }}:
    - task: CodeQL3000Init@0
      displayName: CodeQL Initialize
    - script: "echo ##vso[build.addbuildtag]CodeQL3000"
      displayName: 'Set CI CodeQL3000 tag'
      condition: ne(variables.CODEQL_DIST,'')
  - task: NuGetCommand@2
    displayName: 'Restore Solution'
    inputs:
      restoreSolution: $(Build.SourcesDirectory)\AspNetWebHooks.sln
      feedsToUse: config
      nugetConfigPath: $(Build.SourcesDirectory)\NuGet.config
  - script: .\build.cmd
            EnableSkipStrongNames
            $(BuildScriptArgs)
            /bl:artifacts/logs/Build-SkipStrongNames.binlog
    displayName: Build (Skip StrongNames)
  - script: .\build.cmd
            BuildPackages
            /p:Configuration=Release
            $(BuildScriptArgs)
            $(_AdditionalBuildArgs)
            /bl:artifacts/logs/Build-Release.binlog
    displayName: Build (Release)
  - ${{ if eq(variables.runCodeQL3000, 'true') }}:
    - task: CodeQL3000Finalize@0
      displayName: CodeQL Finalize
  - ${{ else }}:
    - script: .\build.cmd
          BuildPackages
          /p:Configuration=CodeAnalysis
          $(BuildScriptArgs)
          /bl:artifacts/logs/Build-CodeAnalysis.binlog
      displayName: Build (CodeAnalysis)
    - task: CopyFiles@2
      displayName: Copy packages to artifacts/
      inputs:
        sourceFolder: $(Build.SourcesDirectory)/bin/
        contents: 'Release/**/*.nupkg'
        targetFolder: $(Build.SourcesDirectory)/artifacts/
    - task: CmdLine@2
      inputs:
        script: 'git rev-parse HEAD > artifacts/commit'
      displayName: Create commit file
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: $(Build.SourcesDirectory)/artifacts/
        artifactName: artifacts-AspnetWebHooks
        artifactType: Container
        parallel: true

- ${{ if and(eq(variables['System.TeamProject'], 'internal'), ne(variables.runCodeQL3000, 'true')) }}:
  - job: Webhooks_Signed_Build
    displayName: Build AspnetWebHooks-Signed
    dependsOn: Webhooks_Build
    timeoutInMinutes: 60
    workspace:
      clean: all
    pool:
      name: NetCore1ESPool-Internal
      demands: ImageOverride -equals build.windows.10.amd64.vs2017
    variables:
      TeamName: AspNetCore
      _SignType: real
      DOTNET_CLI_TELEMETRY_OPTOUT: 1 # Skip signing telemetry to work around an error
    steps:
    - checkout: git://internal/aspnet-AspNetWebHooks-Signed
      clean: true
    - task: MicroBuildSigningPlugin@2
      displayName: Install MicroBuild Signing plugin
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
    - task: DownloadBuildArtifacts@0
      displayName: Download artifacts
      inputs:
        artifactName: artifacts-AspnetWebHooks
        downloadPath: $(Build.StagingDirectory)/downloaded_artifacts/
    - script: .\build.cmd
              /t:BuildProjects
              /p:Sign=Sign
              /p:SignType=$(_SignType)
              /p:DropSource=$(Build.StagingDirectory)/downloaded_artifacts/artifacts-AspnetWebHooks/
              $(BuildScriptArgs)
              /bl:artifacts/logs/Build-Sign.binlog
      displayName: Build & Sign
    - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          feedsToUse: 'select'
          publishVstsFeed: 'public/general-testing'
          packagesToPush: '$(Build.SourcesDirectory)/artifacts/packages/**/*.nupkg;!$(Build.SourcesDirectory)/artifacts/packages/**/*.symbols.nupkg'
        displayName: Publish packages to general-testing
      - task: NuGetCommand@2
        inputs:
          command: 'push'
          feedsToUse: 'select'
          publishVstsFeed: 'public/general-testing-symbols'
          packagesToPush: '$(Build.SourcesDirectory)/artifacts/packages/**/*.symbols.nupkg'
        displayName: Publish symbols to general-testing-symbols
    - task: PublishBuildArtifacts@1
      displayName: Upload packages
      condition: eq(variables['system.pullrequest.isfork'], false)
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/packages/
        artifactName: artifacts-AspnetWebHooks-Signed-packages
        artifactType: Container
        parallel: true
    - task: PublishBuildArtifacts@1
      displayName: Upload logs
      continueOnError: true
      inputs:
        pathtoPublish: artifacts/logs/
        artifactName: artifacts-AspnetWebHooks-Signed-logs
        artifactType: Container
        parallel: true
